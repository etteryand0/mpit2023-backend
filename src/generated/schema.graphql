### This file was generated by Nexus Schema
### Do not make changes to this file directly


type AggregateChat {
  _count: ChatCountAggregateOutputType
  _max: ChatMaxAggregateOutputType
  _min: ChatMinAggregateOutputType
}

type AggregateMessage {
  _count: MessageCountAggregateOutputType
  _max: MessageMaxAggregateOutputType
  _min: MessageMinAggregateOutputType
}

type AggregateProfile {
  _count: ProfileCountAggregateOutputType
  _max: ProfileMaxAggregateOutputType
  _min: ProfileMinAggregateOutputType
}

type AggregateUser {
  _count: UserCountAggregateOutputType
  _max: UserMaxAggregateOutputType
  _min: UserMinAggregateOutputType
}

type BatchPayload {
  count: Int!
}

"""
The `BigInt` scalar type represents non-fractional signed whole numeric values.
@see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt
"""
scalar BigInt

"""The `Byte` scalar type represents byte value as a Buffer"""
scalar Bytes

type Chat {
  _count: ChatCountOutputType!
  createdAt: DateTime!
  id: String!
  members(cursor: UserWhereUniqueInput, distinct: UserScalarFieldEnum, orderBy: UserOrderByWithRelationInput, skip: Int, take: Int, where: UserWhereInput): [User!]!
  messages(cursor: MessageWhereUniqueInput, distinct: MessageScalarFieldEnum, orderBy: MessageOrderByWithRelationInput, skip: Int, take: Int, where: MessageWhereInput): [Message!]!
}

type ChatCountAggregateOutputType {
  _all: Int!
  createdAt: Int!
  id: Int!
}

input ChatCountOrderByAggregateInput {
  createdAt: SortOrder
  id: SortOrder
}

type ChatCountOutputType {
  members: Int!
  messages: Int!
}

input ChatCreateInput {
  createdAt: DateTime
  id: String
  members: UserCreateNestedManyWithoutChatsInput
  messages: MessageCreateNestedManyWithoutChatInput
}

input ChatCreateManyInput {
  createdAt: DateTime
  id: String
}

input ChatCreateNestedManyWithoutMembersInput {
  connect: [ChatWhereUniqueInput]
  connectOrCreate: [ChatCreateOrConnectWithoutMembersInput]
  create: [ChatCreateWithoutMembersInput]
}

input ChatCreateNestedOneWithoutMessagesInput {
  connect: ChatWhereUniqueInput
  connectOrCreate: ChatCreateOrConnectWithoutMessagesInput
  create: ChatUncheckedCreateWithoutMessagesInput
}

input ChatCreateOrConnectWithoutMembersInput {
  create: ChatUncheckedCreateWithoutMembersInput!
  where: ChatWhereUniqueInput!
}

input ChatCreateOrConnectWithoutMessagesInput {
  create: ChatUncheckedCreateWithoutMessagesInput!
  where: ChatWhereUniqueInput!
}

input ChatCreateWithoutMembersInput {
  createdAt: DateTime
  id: String
  messages: MessageCreateNestedManyWithoutChatInput
}

input ChatCreateWithoutMessagesInput {
  createdAt: DateTime
  id: String
  members: UserCreateNestedManyWithoutChatsInput
}

input ChatListRelationFilter {
  every: ChatWhereInput
  none: ChatWhereInput
  some: ChatWhereInput
}

type ChatMaxAggregateOutputType {
  createdAt: DateTime
  id: String
}

input ChatMaxOrderByAggregateInput {
  createdAt: SortOrder
  id: SortOrder
}

type ChatMinAggregateOutputType {
  createdAt: DateTime
  id: String
}

input ChatMinOrderByAggregateInput {
  createdAt: SortOrder
  id: SortOrder
}

input ChatOrderByRelationAggregateInput {
  _count: SortOrder
}

input ChatOrderByWithAggregationInput {
  _count: ChatCountOrderByAggregateInput
  _max: ChatMaxOrderByAggregateInput
  _min: ChatMinOrderByAggregateInput
  createdAt: SortOrder
  id: SortOrder
}

input ChatOrderByWithRelationInput {
  createdAt: SortOrder
  id: SortOrder
  members: UserOrderByRelationAggregateInput
  messages: MessageOrderByRelationAggregateInput
}

input ChatRelationFilter {
  is: ChatWhereInput
  isNot: ChatWhereInput
}

enum ChatScalarFieldEnum {
  createdAt
  id
}

input ChatScalarWhereInput {
  AND: [ChatScalarWhereInput]
  NOT: [ChatScalarWhereInput]
  OR: [ChatScalarWhereInput]
  createdAt: DateTimeFilter
  id: StringFilter
}

input ChatScalarWhereWithAggregatesInput {
  AND: [ChatScalarWhereWithAggregatesInput]
  NOT: [ChatScalarWhereWithAggregatesInput]
  OR: [ChatScalarWhereWithAggregatesInput]
  createdAt: DateTimeWithAggregatesFilter
  id: StringWithAggregatesFilter
}

input ChatUncheckedCreateInput {
  createdAt: DateTime
  id: String
  members: UserUncheckedCreateNestedManyWithoutChatsInput
  messages: MessageUncheckedCreateNestedManyWithoutChatInput
}

input ChatUncheckedCreateNestedManyWithoutMembersInput {
  connect: [ChatWhereUniqueInput]
  connectOrCreate: [ChatCreateOrConnectWithoutMembersInput]
  create: [ChatCreateWithoutMembersInput]
}

input ChatUncheckedCreateWithoutMembersInput {
  createdAt: DateTime
  id: String
  messages: MessageUncheckedCreateNestedManyWithoutChatInput
}

input ChatUncheckedCreateWithoutMessagesInput {
  createdAt: DateTime
  id: String
  members: UserUncheckedCreateNestedManyWithoutChatsInput
}

input ChatUncheckedUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  members: UserUncheckedUpdateManyWithoutChatsNestedInput
  messages: MessageUncheckedUpdateManyWithoutChatNestedInput
}

input ChatUncheckedUpdateManyInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
}

input ChatUncheckedUpdateManyWithoutChatsInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
}

input ChatUncheckedUpdateManyWithoutMembersNestedInput {
  connect: [ChatWhereUniqueInput]
  connectOrCreate: [ChatCreateOrConnectWithoutMembersInput]
  create: [ChatCreateWithoutMembersInput]
  delete: [ChatWhereUniqueInput]
  deleteMany: [ChatScalarWhereInput]
  disconnect: [ChatWhereUniqueInput]
  set: [ChatWhereUniqueInput]
  update: [ChatUpdateWithWhereUniqueWithoutMembersInput]
  updateMany: [ChatUpdateManyWithWhereWithoutMembersInput]
  upsert: [ChatUpsertWithWhereUniqueWithoutMembersInput]
}

input ChatUncheckedUpdateWithoutMembersInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  messages: MessageUncheckedUpdateManyWithoutChatNestedInput
}

input ChatUncheckedUpdateWithoutMessagesInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  members: UserUncheckedUpdateManyWithoutChatsNestedInput
}

input ChatUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  members: UserUpdateManyWithoutChatsNestedInput
  messages: MessageUpdateManyWithoutChatNestedInput
}

input ChatUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
}

input ChatUpdateManyWithWhereWithoutMembersInput {
  data: ChatUncheckedUpdateManyWithoutChatsInput!
  where: ChatScalarWhereInput!
}

input ChatUpdateManyWithoutMembersNestedInput {
  connect: [ChatWhereUniqueInput]
  connectOrCreate: [ChatCreateOrConnectWithoutMembersInput]
  create: [ChatCreateWithoutMembersInput]
  delete: [ChatWhereUniqueInput]
  deleteMany: [ChatScalarWhereInput]
  disconnect: [ChatWhereUniqueInput]
  set: [ChatWhereUniqueInput]
  update: [ChatUpdateWithWhereUniqueWithoutMembersInput]
  updateMany: [ChatUpdateManyWithWhereWithoutMembersInput]
  upsert: [ChatUpsertWithWhereUniqueWithoutMembersInput]
}

input ChatUpdateOneRequiredWithoutMessagesNestedInput {
  connect: ChatWhereUniqueInput
  connectOrCreate: ChatCreateOrConnectWithoutMessagesInput
  create: ChatUncheckedCreateWithoutMessagesInput
  update: ChatUncheckedUpdateWithoutMessagesInput
  upsert: ChatUpsertWithoutMessagesInput
}

input ChatUpdateWithWhereUniqueWithoutMembersInput {
  data: ChatUncheckedUpdateWithoutMembersInput!
  where: ChatWhereUniqueInput!
}

input ChatUpdateWithoutMembersInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  messages: MessageUpdateManyWithoutChatNestedInput
}

input ChatUpdateWithoutMessagesInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  members: UserUpdateManyWithoutChatsNestedInput
}

input ChatUpsertWithWhereUniqueWithoutMembersInput {
  create: ChatUncheckedCreateWithoutMembersInput!
  update: ChatUncheckedUpdateWithoutMembersInput!
  where: ChatWhereUniqueInput!
}

input ChatUpsertWithoutMessagesInput {
  create: ChatUncheckedCreateWithoutMessagesInput!
  update: ChatUncheckedUpdateWithoutMessagesInput!
}

input ChatWhereInput {
  AND: [ChatWhereInput]
  NOT: [ChatWhereInput]
  OR: [ChatWhereInput]
  createdAt: DateTimeFilter
  id: StringFilter
  members: UserListRelationFilter
  messages: MessageListRelationFilter
}

input ChatWhereUniqueInput {
  id: String
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

input DateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime]
}

input DateTimeWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedDateTimeFilter
  _min: NestedDateTimeFilter
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeWithAggregatesFilter
  notIn: [DateTime]
}

"""An arbitrary-precision Decimal type"""
scalar Decimal

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar Json @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Message {
  chat: Chat!
  chatId: String!
  id: String!
  message: String!
  sender: User!
  sentDate: DateTime!
  userId: String!
}

type MessageCountAggregateOutputType {
  _all: Int!
  chatId: Int!
  id: Int!
  message: Int!
  sentDate: Int!
  userId: Int!
}

input MessageCountOrderByAggregateInput {
  chatId: SortOrder
  id: SortOrder
  message: SortOrder
  sentDate: SortOrder
  userId: SortOrder
}

input MessageCreateInput {
  chat: ChatCreateNestedOneWithoutMessagesInput!
  id: String
  message: String!
  sender: UserCreateNestedOneWithoutMessagesInput!
  sentDate: DateTime
}

input MessageCreateManyChatInput {
  id: String
  message: String!
  sentDate: DateTime
  userId: String!
}

input MessageCreateManyChatInputEnvelope {
  data: MessageCreateManyChatInput!
  skipDuplicates: Boolean
}

input MessageCreateManyInput {
  chatId: String!
  id: String
  message: String!
  sentDate: DateTime
  userId: String!
}

input MessageCreateManySenderInput {
  chatId: String!
  id: String
  message: String!
  sentDate: DateTime
}

input MessageCreateManySenderInputEnvelope {
  data: MessageCreateManySenderInput!
  skipDuplicates: Boolean
}

input MessageCreateNestedManyWithoutChatInput {
  connect: [MessageWhereUniqueInput]
  connectOrCreate: [MessageCreateOrConnectWithoutChatInput]
  create: [MessageCreateWithoutChatInput]
  createMany: MessageCreateManyChatInputEnvelope
}

input MessageCreateNestedManyWithoutSenderInput {
  connect: [MessageWhereUniqueInput]
  connectOrCreate: [MessageCreateOrConnectWithoutSenderInput]
  create: [MessageCreateWithoutSenderInput]
  createMany: MessageCreateManySenderInputEnvelope
}

input MessageCreateOrConnectWithoutChatInput {
  create: MessageUncheckedCreateWithoutChatInput!
  where: MessageWhereUniqueInput!
}

input MessageCreateOrConnectWithoutSenderInput {
  create: MessageUncheckedCreateWithoutSenderInput!
  where: MessageWhereUniqueInput!
}

input MessageCreateWithoutChatInput {
  id: String
  message: String!
  sender: UserCreateNestedOneWithoutMessagesInput!
  sentDate: DateTime
}

input MessageCreateWithoutSenderInput {
  chat: ChatCreateNestedOneWithoutMessagesInput!
  id: String
  message: String!
  sentDate: DateTime
}

input MessageListRelationFilter {
  every: MessageWhereInput
  none: MessageWhereInput
  some: MessageWhereInput
}

type MessageMaxAggregateOutputType {
  chatId: String
  id: String
  message: String
  sentDate: DateTime
  userId: String
}

input MessageMaxOrderByAggregateInput {
  chatId: SortOrder
  id: SortOrder
  message: SortOrder
  sentDate: SortOrder
  userId: SortOrder
}

type MessageMinAggregateOutputType {
  chatId: String
  id: String
  message: String
  sentDate: DateTime
  userId: String
}

input MessageMinOrderByAggregateInput {
  chatId: SortOrder
  id: SortOrder
  message: SortOrder
  sentDate: SortOrder
  userId: SortOrder
}

input MessageOrderByRelationAggregateInput {
  _count: SortOrder
}

input MessageOrderByWithAggregationInput {
  _count: MessageCountOrderByAggregateInput
  _max: MessageMaxOrderByAggregateInput
  _min: MessageMinOrderByAggregateInput
  chatId: SortOrder
  id: SortOrder
  message: SortOrder
  sentDate: SortOrder
  userId: SortOrder
}

input MessageOrderByWithRelationInput {
  chat: ChatOrderByWithRelationInput
  chatId: SortOrder
  id: SortOrder
  message: SortOrder
  sender: UserOrderByWithRelationInput
  sentDate: SortOrder
  userId: SortOrder
}

enum MessageScalarFieldEnum {
  chatId
  id
  message
  sentDate
  userId
}

input MessageScalarWhereInput {
  AND: [MessageScalarWhereInput]
  NOT: [MessageScalarWhereInput]
  OR: [MessageScalarWhereInput]
  chatId: StringFilter
  id: StringFilter
  message: StringFilter
  sentDate: DateTimeFilter
  userId: StringFilter
}

input MessageScalarWhereWithAggregatesInput {
  AND: [MessageScalarWhereWithAggregatesInput]
  NOT: [MessageScalarWhereWithAggregatesInput]
  OR: [MessageScalarWhereWithAggregatesInput]
  chatId: StringWithAggregatesFilter
  id: StringWithAggregatesFilter
  message: StringWithAggregatesFilter
  sentDate: DateTimeWithAggregatesFilter
  userId: StringWithAggregatesFilter
}

input MessageUncheckedCreateInput {
  chatId: String!
  id: String
  message: String!
  sentDate: DateTime
  userId: String!
}

input MessageUncheckedCreateNestedManyWithoutChatInput {
  connect: [MessageWhereUniqueInput]
  connectOrCreate: [MessageCreateOrConnectWithoutChatInput]
  create: [MessageCreateWithoutChatInput]
  createMany: MessageCreateManyChatInputEnvelope
}

input MessageUncheckedCreateNestedManyWithoutSenderInput {
  connect: [MessageWhereUniqueInput]
  connectOrCreate: [MessageCreateOrConnectWithoutSenderInput]
  create: [MessageCreateWithoutSenderInput]
  createMany: MessageCreateManySenderInputEnvelope
}

input MessageUncheckedCreateWithoutChatInput {
  id: String
  message: String!
  sentDate: DateTime
  userId: String!
}

input MessageUncheckedCreateWithoutSenderInput {
  chatId: String!
  id: String
  message: String!
  sentDate: DateTime
}

input MessageUncheckedUpdateInput {
  chatId: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  message: StringFieldUpdateOperationsInput
  sentDate: DateTimeFieldUpdateOperationsInput
  userId: StringFieldUpdateOperationsInput
}

input MessageUncheckedUpdateManyInput {
  chatId: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  message: StringFieldUpdateOperationsInput
  sentDate: DateTimeFieldUpdateOperationsInput
  userId: StringFieldUpdateOperationsInput
}

input MessageUncheckedUpdateManyWithoutChatNestedInput {
  connect: [MessageWhereUniqueInput]
  connectOrCreate: [MessageCreateOrConnectWithoutChatInput]
  create: [MessageCreateWithoutChatInput]
  createMany: MessageCreateManyChatInputEnvelope
  delete: [MessageWhereUniqueInput]
  deleteMany: [MessageScalarWhereInput]
  disconnect: [MessageWhereUniqueInput]
  set: [MessageWhereUniqueInput]
  update: [MessageUpdateWithWhereUniqueWithoutChatInput]
  updateMany: [MessageUpdateManyWithWhereWithoutChatInput]
  upsert: [MessageUpsertWithWhereUniqueWithoutChatInput]
}

input MessageUncheckedUpdateManyWithoutMessagesInput {
  id: StringFieldUpdateOperationsInput
  message: StringFieldUpdateOperationsInput
  sentDate: DateTimeFieldUpdateOperationsInput
  userId: StringFieldUpdateOperationsInput
}

input MessageUncheckedUpdateManyWithoutSenderNestedInput {
  connect: [MessageWhereUniqueInput]
  connectOrCreate: [MessageCreateOrConnectWithoutSenderInput]
  create: [MessageCreateWithoutSenderInput]
  createMany: MessageCreateManySenderInputEnvelope
  delete: [MessageWhereUniqueInput]
  deleteMany: [MessageScalarWhereInput]
  disconnect: [MessageWhereUniqueInput]
  set: [MessageWhereUniqueInput]
  update: [MessageUpdateWithWhereUniqueWithoutSenderInput]
  updateMany: [MessageUpdateManyWithWhereWithoutSenderInput]
  upsert: [MessageUpsertWithWhereUniqueWithoutSenderInput]
}

input MessageUncheckedUpdateWithoutChatInput {
  id: StringFieldUpdateOperationsInput
  message: StringFieldUpdateOperationsInput
  sentDate: DateTimeFieldUpdateOperationsInput
  userId: StringFieldUpdateOperationsInput
}

input MessageUncheckedUpdateWithoutSenderInput {
  chatId: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  message: StringFieldUpdateOperationsInput
  sentDate: DateTimeFieldUpdateOperationsInput
}

input MessageUpdateInput {
  chat: ChatUpdateOneRequiredWithoutMessagesNestedInput
  id: StringFieldUpdateOperationsInput
  message: StringFieldUpdateOperationsInput
  sender: UserUpdateOneRequiredWithoutMessagesNestedInput
  sentDate: DateTimeFieldUpdateOperationsInput
}

input MessageUpdateManyMutationInput {
  id: StringFieldUpdateOperationsInput
  message: StringFieldUpdateOperationsInput
  sentDate: DateTimeFieldUpdateOperationsInput
}

input MessageUpdateManyWithWhereWithoutChatInput {
  data: MessageUncheckedUpdateManyWithoutMessagesInput!
  where: MessageScalarWhereInput!
}

input MessageUpdateManyWithWhereWithoutSenderInput {
  data: MessageUncheckedUpdateManyWithoutMessagesInput!
  where: MessageScalarWhereInput!
}

input MessageUpdateManyWithoutChatNestedInput {
  connect: [MessageWhereUniqueInput]
  connectOrCreate: [MessageCreateOrConnectWithoutChatInput]
  create: [MessageCreateWithoutChatInput]
  createMany: MessageCreateManyChatInputEnvelope
  delete: [MessageWhereUniqueInput]
  deleteMany: [MessageScalarWhereInput]
  disconnect: [MessageWhereUniqueInput]
  set: [MessageWhereUniqueInput]
  update: [MessageUpdateWithWhereUniqueWithoutChatInput]
  updateMany: [MessageUpdateManyWithWhereWithoutChatInput]
  upsert: [MessageUpsertWithWhereUniqueWithoutChatInput]
}

input MessageUpdateManyWithoutSenderNestedInput {
  connect: [MessageWhereUniqueInput]
  connectOrCreate: [MessageCreateOrConnectWithoutSenderInput]
  create: [MessageCreateWithoutSenderInput]
  createMany: MessageCreateManySenderInputEnvelope
  delete: [MessageWhereUniqueInput]
  deleteMany: [MessageScalarWhereInput]
  disconnect: [MessageWhereUniqueInput]
  set: [MessageWhereUniqueInput]
  update: [MessageUpdateWithWhereUniqueWithoutSenderInput]
  updateMany: [MessageUpdateManyWithWhereWithoutSenderInput]
  upsert: [MessageUpsertWithWhereUniqueWithoutSenderInput]
}

input MessageUpdateWithWhereUniqueWithoutChatInput {
  data: MessageUncheckedUpdateWithoutChatInput!
  where: MessageWhereUniqueInput!
}

input MessageUpdateWithWhereUniqueWithoutSenderInput {
  data: MessageUncheckedUpdateWithoutSenderInput!
  where: MessageWhereUniqueInput!
}

input MessageUpdateWithoutChatInput {
  id: StringFieldUpdateOperationsInput
  message: StringFieldUpdateOperationsInput
  sender: UserUpdateOneRequiredWithoutMessagesNestedInput
  sentDate: DateTimeFieldUpdateOperationsInput
}

input MessageUpdateWithoutSenderInput {
  chat: ChatUpdateOneRequiredWithoutMessagesNestedInput
  id: StringFieldUpdateOperationsInput
  message: StringFieldUpdateOperationsInput
  sentDate: DateTimeFieldUpdateOperationsInput
}

input MessageUpsertWithWhereUniqueWithoutChatInput {
  create: MessageUncheckedCreateWithoutChatInput!
  update: MessageUncheckedUpdateWithoutChatInput!
  where: MessageWhereUniqueInput!
}

input MessageUpsertWithWhereUniqueWithoutSenderInput {
  create: MessageUncheckedCreateWithoutSenderInput!
  update: MessageUncheckedUpdateWithoutSenderInput!
  where: MessageWhereUniqueInput!
}

input MessageWhereInput {
  AND: [MessageWhereInput]
  NOT: [MessageWhereInput]
  OR: [MessageWhereInput]
  chat: ChatWhereInput
  chatId: StringFilter
  id: StringFilter
  message: StringFilter
  sender: UserWhereInput
  sentDate: DateTimeFilter
  userId: StringFilter
}

input MessageWhereUniqueInput {
  id: String
}

type Mutation {
  createOneChat(data: ChatCreateInput!): Chat!
  createOneMessage(data: MessageCreateInput!): Message!
  createOneProfile(data: ProfileCreateInput!): Profile!
  createOneUser(data: UserCreateInput!): User!
  deleteManyChat(where: ChatWhereInput): BatchPayload!
  deleteManyMessage(where: MessageWhereInput): BatchPayload!
  deleteManyProfile(where: ProfileWhereInput): BatchPayload!
  deleteManyUser(where: UserWhereInput): BatchPayload!
  deleteOneChat(where: ChatWhereUniqueInput!): Chat
  deleteOneMessage(where: MessageWhereUniqueInput!): Message
  deleteOneProfile(where: ProfileWhereUniqueInput!): Profile
  deleteOneUser(where: UserWhereUniqueInput!): User
  login(data: SignInInput!): Token!
  sendMessage(data: SendMessageInput!): Message!
  signup(data: SignUpInput!): Token!
  updateManyChat(data: ChatUpdateManyMutationInput!, where: ChatWhereInput): BatchPayload!
  updateManyMessage(data: MessageUpdateManyMutationInput!, where: MessageWhereInput): BatchPayload!
  updateManyProfile(data: ProfileUpdateManyMutationInput!, where: ProfileWhereInput): BatchPayload!
  updateManyUser(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  updateOneChat(data: ChatUpdateInput!, where: ChatWhereUniqueInput!): Chat!
  updateOneMessage(data: MessageUpdateInput!, where: MessageWhereUniqueInput!): Message!
  updateOneProfile(data: ProfileUpdateInput!, where: ProfileWhereUniqueInput!): Profile!
  updateOneUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User!
  upsertOneChat(create: ChatCreateInput!, update: ChatUpdateInput!, where: ChatWhereUniqueInput!): Chat!
  upsertOneMessage(create: MessageCreateInput!, update: MessageUpdateInput!, where: MessageWhereUniqueInput!): Message!
  upsertOneProfile(create: ProfileCreateInput!, update: ProfileUpdateInput!, where: ProfileWhereUniqueInput!): Profile!
  upsertOneUser(create: UserCreateInput!, update: UserUpdateInput!, where: UserWhereUniqueInput!): User!
}

input NestedDateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime]
}

input NestedDateTimeWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedDateTimeFilter
  _min: NestedDateTimeFilter
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeWithAggregatesFilter
  notIn: [DateTime]
}

input NestedIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int]
}

input NestedIntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String]
  startsWith: String
}

input NestedStringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String]
  startsWith: String
}

input NestedStringNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedStringNullableFilter
  _min: NestedStringNullableFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  not: NestedStringNullableWithAggregatesFilter
  notIn: [String]
  startsWith: String
}

input NestedStringWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedStringFilter
  _min: NestedStringFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  not: NestedStringWithAggregatesFilter
  notIn: [String]
  startsWith: String
}

input NullableStringFieldUpdateOperationsInput {
  set: String
}

type Profile {
  avatar: String
  bio: String
  id: String!
  name: String
  updatedAt: DateTime!
  user: User!
  userId: String!
}

type ProfileCountAggregateOutputType {
  _all: Int!
  avatar: Int!
  bio: Int!
  id: Int!
  name: Int!
  updatedAt: Int!
  userId: Int!
}

input ProfileCountOrderByAggregateInput {
  avatar: SortOrder
  bio: SortOrder
  id: SortOrder
  name: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

input ProfileCreateInput {
  avatar: String
  bio: String
  id: String
  name: String
  updatedAt: DateTime
  user: UserCreateNestedOneWithoutProfileInput!
}

input ProfileCreateManyInput {
  avatar: String
  bio: String
  id: String
  name: String
  updatedAt: DateTime
  userId: String!
}

input ProfileCreateNestedOneWithoutUserInput {
  connect: ProfileWhereUniqueInput
  connectOrCreate: ProfileCreateOrConnectWithoutUserInput
  create: ProfileUncheckedCreateWithoutUserInput
}

input ProfileCreateOrConnectWithoutUserInput {
  create: ProfileUncheckedCreateWithoutUserInput!
  where: ProfileWhereUniqueInput!
}

input ProfileCreateWithoutUserInput {
  avatar: String
  bio: String
  id: String
  name: String
  updatedAt: DateTime
}

type ProfileMaxAggregateOutputType {
  avatar: String
  bio: String
  id: String
  name: String
  updatedAt: DateTime
  userId: String
}

input ProfileMaxOrderByAggregateInput {
  avatar: SortOrder
  bio: SortOrder
  id: SortOrder
  name: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

type ProfileMinAggregateOutputType {
  avatar: String
  bio: String
  id: String
  name: String
  updatedAt: DateTime
  userId: String
}

input ProfileMinOrderByAggregateInput {
  avatar: SortOrder
  bio: SortOrder
  id: SortOrder
  name: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

input ProfileOrderByWithAggregationInput {
  _count: ProfileCountOrderByAggregateInput
  _max: ProfileMaxOrderByAggregateInput
  _min: ProfileMinOrderByAggregateInput
  avatar: SortOrder
  bio: SortOrder
  id: SortOrder
  name: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

input ProfileOrderByWithRelationInput {
  avatar: SortOrder
  bio: SortOrder
  id: SortOrder
  name: SortOrder
  updatedAt: SortOrder
  user: UserOrderByWithRelationInput
  userId: SortOrder
}

input ProfileRelationFilter {
  is: ProfileWhereInput
  isNot: ProfileWhereInput
}

enum ProfileScalarFieldEnum {
  avatar
  bio
  id
  name
  updatedAt
  userId
}

input ProfileScalarWhereWithAggregatesInput {
  AND: [ProfileScalarWhereWithAggregatesInput]
  NOT: [ProfileScalarWhereWithAggregatesInput]
  OR: [ProfileScalarWhereWithAggregatesInput]
  avatar: StringNullableWithAggregatesFilter
  bio: StringNullableWithAggregatesFilter
  id: StringWithAggregatesFilter
  name: StringNullableWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
  userId: StringWithAggregatesFilter
}

input ProfileUncheckedCreateInput {
  avatar: String
  bio: String
  id: String
  name: String
  updatedAt: DateTime
  userId: String!
}

input ProfileUncheckedCreateNestedOneWithoutUserInput {
  connect: ProfileWhereUniqueInput
  connectOrCreate: ProfileCreateOrConnectWithoutUserInput
  create: ProfileUncheckedCreateWithoutUserInput
}

input ProfileUncheckedCreateWithoutUserInput {
  avatar: String
  bio: String
  id: String
  name: String
  updatedAt: DateTime
}

input ProfileUncheckedUpdateInput {
  avatar: NullableStringFieldUpdateOperationsInput
  bio: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  userId: StringFieldUpdateOperationsInput
}

input ProfileUncheckedUpdateManyInput {
  avatar: NullableStringFieldUpdateOperationsInput
  bio: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  userId: StringFieldUpdateOperationsInput
}

input ProfileUncheckedUpdateOneWithoutUserNestedInput {
  connect: ProfileWhereUniqueInput
  connectOrCreate: ProfileCreateOrConnectWithoutUserInput
  create: ProfileUncheckedCreateWithoutUserInput
  delete: Boolean
  disconnect: Boolean
  update: ProfileUncheckedUpdateWithoutUserInput
  upsert: ProfileUpsertWithoutUserInput
}

input ProfileUncheckedUpdateWithoutUserInput {
  avatar: NullableStringFieldUpdateOperationsInput
  bio: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ProfileUpdateInput {
  avatar: NullableStringFieldUpdateOperationsInput
  bio: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutProfileNestedInput
}

input ProfileUpdateManyMutationInput {
  avatar: NullableStringFieldUpdateOperationsInput
  bio: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ProfileUpdateOneWithoutUserNestedInput {
  connect: ProfileWhereUniqueInput
  connectOrCreate: ProfileCreateOrConnectWithoutUserInput
  create: ProfileUncheckedCreateWithoutUserInput
  delete: Boolean
  disconnect: Boolean
  update: ProfileUncheckedUpdateWithoutUserInput
  upsert: ProfileUpsertWithoutUserInput
}

input ProfileUpdateWithoutUserInput {
  avatar: NullableStringFieldUpdateOperationsInput
  bio: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ProfileUpsertWithoutUserInput {
  create: ProfileUncheckedCreateWithoutUserInput!
  update: ProfileUncheckedUpdateWithoutUserInput!
}

input ProfileWhereInput {
  AND: [ProfileWhereInput]
  NOT: [ProfileWhereInput]
  OR: [ProfileWhereInput]
  avatar: StringNullableFilter
  bio: StringNullableFilter
  id: StringFilter
  name: StringNullableFilter
  updatedAt: DateTimeFilter
  user: UserWhereInput
  userId: StringFilter
}

input ProfileWhereUniqueInput {
  id: String
  userId: String
}

type Query {
  aggregateChat(cursor: ChatWhereUniqueInput, orderBy: [ChatOrderByWithRelationInput], skip: Int, take: Int, where: ChatWhereInput): AggregateChat
  aggregateMessage(cursor: MessageWhereUniqueInput, orderBy: [MessageOrderByWithRelationInput], skip: Int, take: Int, where: MessageWhereInput): AggregateMessage
  aggregateProfile(cursor: ProfileWhereUniqueInput, orderBy: [ProfileOrderByWithRelationInput], skip: Int, take: Int, where: ProfileWhereInput): AggregateProfile
  aggregateUser(cursor: UserWhereUniqueInput, orderBy: [UserOrderByWithRelationInput], skip: Int, take: Int, where: UserWhereInput): AggregateUser
  findFirstChat(cursor: ChatWhereUniqueInput, distinct: [ChatScalarFieldEnum], orderBy: [ChatOrderByWithRelationInput], skip: Int, take: Int, where: ChatWhereInput): Chat
  findFirstMessage(cursor: MessageWhereUniqueInput, distinct: [MessageScalarFieldEnum], orderBy: [MessageOrderByWithRelationInput], skip: Int, take: Int, where: MessageWhereInput): Message
  findFirstProfile(cursor: ProfileWhereUniqueInput, distinct: [ProfileScalarFieldEnum], orderBy: [ProfileOrderByWithRelationInput], skip: Int, take: Int, where: ProfileWhereInput): Profile
  findFirstUser(cursor: UserWhereUniqueInput, distinct: [UserScalarFieldEnum], orderBy: [UserOrderByWithRelationInput], skip: Int, take: Int, where: UserWhereInput): User
  findManyChat(cursor: ChatWhereUniqueInput, distinct: [ChatScalarFieldEnum], orderBy: [ChatOrderByWithRelationInput], skip: Int, take: Int, where: ChatWhereInput): [Chat!]!
  findManyChatCount(cursor: ChatWhereUniqueInput, distinct: [ChatScalarFieldEnum], orderBy: [ChatOrderByWithRelationInput], skip: Int, take: Int, where: ChatWhereInput): Int!
  findManyMessage(cursor: MessageWhereUniqueInput, distinct: [MessageScalarFieldEnum], orderBy: [MessageOrderByWithRelationInput], skip: Int, take: Int, where: MessageWhereInput): [Message!]!
  findManyMessageCount(cursor: MessageWhereUniqueInput, distinct: [MessageScalarFieldEnum], orderBy: [MessageOrderByWithRelationInput], skip: Int, take: Int, where: MessageWhereInput): Int!
  findManyProfile(cursor: ProfileWhereUniqueInput, distinct: [ProfileScalarFieldEnum], orderBy: [ProfileOrderByWithRelationInput], skip: Int, take: Int, where: ProfileWhereInput): [Profile!]!
  findManyProfileCount(cursor: ProfileWhereUniqueInput, distinct: [ProfileScalarFieldEnum], orderBy: [ProfileOrderByWithRelationInput], skip: Int, take: Int, where: ProfileWhereInput): Int!
  findManyUser(cursor: UserWhereUniqueInput, distinct: [UserScalarFieldEnum], orderBy: [UserOrderByWithRelationInput], skip: Int, take: Int, where: UserWhereInput): [User!]!
  findManyUserCount(cursor: UserWhereUniqueInput, distinct: [UserScalarFieldEnum], orderBy: [UserOrderByWithRelationInput], skip: Int, take: Int, where: UserWhereInput): Int!
  findUniqueChat(where: ChatWhereUniqueInput!): Chat
  findUniqueMessage(where: MessageWhereUniqueInput!): Message
  findUniqueProfile(where: ProfileWhereUniqueInput!): Profile
  findUniqueUser(where: UserWhereUniqueInput!): User
  me: User!
}

enum QueryMode {
  default
  insensitive
}

input SendMessageInput {
  chatId: String!
  message: String!
}

input SignInInput {
  password: String!
  username: String!
}

input SignUpInput {
  password: String!
  username: String!
}

enum SortOrder {
  asc
  desc
}

input StringFieldUpdateOperationsInput {
  set: String
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringFilter
  notIn: [String]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringNullableFilter
  notIn: [String]
  startsWith: String
}

input StringNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedStringNullableFilter
  _min: NestedStringNullableFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringNullableWithAggregatesFilter
  notIn: [String]
  startsWith: String
}

input StringWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedStringFilter
  _min: NestedStringFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringWithAggregatesFilter
  notIn: [String]
  startsWith: String
}

type Subscription {
  chat(chatId: String!): Message
}

type Token {
  token: String
}

enum TransactionIsolationLevel {
  ReadCommitted
  ReadUncommitted
  RepeatableRead
  Serializable
}

type User {
  _count: UserCountOutputType!
  chats(cursor: ChatWhereUniqueInput, distinct: ChatScalarFieldEnum, orderBy: ChatOrderByWithRelationInput, skip: Int, take: Int, where: ChatWhereInput): [Chat!]!
  createdAt: DateTime!
  id: String!
  messages(cursor: MessageWhereUniqueInput, distinct: MessageScalarFieldEnum, orderBy: MessageOrderByWithRelationInput, skip: Int, take: Int, where: MessageWhereInput): [Message!]!
  password: String!
  profile: Profile
  username: String!
}

type UserCountAggregateOutputType {
  _all: Int!
  createdAt: Int!
  id: Int!
  password: Int!
  username: Int!
}

input UserCountOrderByAggregateInput {
  createdAt: SortOrder
  id: SortOrder
  password: SortOrder
  username: SortOrder
}

type UserCountOutputType {
  chats: Int!
  messages: Int!
}

input UserCreateInput {
  chats: ChatCreateNestedManyWithoutMembersInput
  createdAt: DateTime
  id: String
  messages: MessageCreateNestedManyWithoutSenderInput
  password: String!
  profile: ProfileCreateNestedOneWithoutUserInput
  username: String!
}

input UserCreateManyInput {
  createdAt: DateTime
  id: String
  password: String!
  username: String!
}

input UserCreateNestedManyWithoutChatsInput {
  connect: [UserWhereUniqueInput]
  connectOrCreate: [UserCreateOrConnectWithoutChatsInput]
  create: [UserCreateWithoutChatsInput]
}

input UserCreateNestedOneWithoutMessagesInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutMessagesInput
  create: UserUncheckedCreateWithoutMessagesInput
}

input UserCreateNestedOneWithoutProfileInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutProfileInput
  create: UserUncheckedCreateWithoutProfileInput
}

input UserCreateOrConnectWithoutChatsInput {
  create: UserUncheckedCreateWithoutChatsInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutMessagesInput {
  create: UserUncheckedCreateWithoutMessagesInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutProfileInput {
  create: UserUncheckedCreateWithoutProfileInput!
  where: UserWhereUniqueInput!
}

input UserCreateWithoutChatsInput {
  createdAt: DateTime
  id: String
  messages: MessageCreateNestedManyWithoutSenderInput
  password: String!
  profile: ProfileCreateNestedOneWithoutUserInput
  username: String!
}

input UserCreateWithoutMessagesInput {
  chats: ChatCreateNestedManyWithoutMembersInput
  createdAt: DateTime
  id: String
  password: String!
  profile: ProfileCreateNestedOneWithoutUserInput
  username: String!
}

input UserCreateWithoutProfileInput {
  chats: ChatCreateNestedManyWithoutMembersInput
  createdAt: DateTime
  id: String
  messages: MessageCreateNestedManyWithoutSenderInput
  password: String!
  username: String!
}

input UserListRelationFilter {
  every: UserWhereInput
  none: UserWhereInput
  some: UserWhereInput
}

type UserMaxAggregateOutputType {
  createdAt: DateTime
  id: String
  password: String
  username: String
}

input UserMaxOrderByAggregateInput {
  createdAt: SortOrder
  id: SortOrder
  password: SortOrder
  username: SortOrder
}

type UserMinAggregateOutputType {
  createdAt: DateTime
  id: String
  password: String
  username: String
}

input UserMinOrderByAggregateInput {
  createdAt: SortOrder
  id: SortOrder
  password: SortOrder
  username: SortOrder
}

input UserOrderByRelationAggregateInput {
  _count: SortOrder
}

input UserOrderByWithAggregationInput {
  _count: UserCountOrderByAggregateInput
  _max: UserMaxOrderByAggregateInput
  _min: UserMinOrderByAggregateInput
  createdAt: SortOrder
  id: SortOrder
  password: SortOrder
  username: SortOrder
}

input UserOrderByWithRelationInput {
  chats: ChatOrderByRelationAggregateInput
  createdAt: SortOrder
  id: SortOrder
  messages: MessageOrderByRelationAggregateInput
  password: SortOrder
  profile: ProfileOrderByWithRelationInput
  username: SortOrder
}

input UserRelationFilter {
  is: UserWhereInput
  isNot: UserWhereInput
}

enum UserScalarFieldEnum {
  createdAt
  id
  password
  username
}

input UserScalarWhereInput {
  AND: [UserScalarWhereInput]
  NOT: [UserScalarWhereInput]
  OR: [UserScalarWhereInput]
  createdAt: DateTimeFilter
  id: StringFilter
  password: StringFilter
  username: StringFilter
}

input UserScalarWhereWithAggregatesInput {
  AND: [UserScalarWhereWithAggregatesInput]
  NOT: [UserScalarWhereWithAggregatesInput]
  OR: [UserScalarWhereWithAggregatesInput]
  createdAt: DateTimeWithAggregatesFilter
  id: StringWithAggregatesFilter
  password: StringWithAggregatesFilter
  username: StringWithAggregatesFilter
}

input UserUncheckedCreateInput {
  chats: ChatUncheckedCreateNestedManyWithoutMembersInput
  createdAt: DateTime
  id: String
  messages: MessageUncheckedCreateNestedManyWithoutSenderInput
  password: String!
  profile: ProfileUncheckedCreateNestedOneWithoutUserInput
  username: String!
}

input UserUncheckedCreateNestedManyWithoutChatsInput {
  connect: [UserWhereUniqueInput]
  connectOrCreate: [UserCreateOrConnectWithoutChatsInput]
  create: [UserCreateWithoutChatsInput]
}

input UserUncheckedCreateWithoutChatsInput {
  createdAt: DateTime
  id: String
  messages: MessageUncheckedCreateNestedManyWithoutSenderInput
  password: String!
  profile: ProfileUncheckedCreateNestedOneWithoutUserInput
  username: String!
}

input UserUncheckedCreateWithoutMessagesInput {
  chats: ChatUncheckedCreateNestedManyWithoutMembersInput
  createdAt: DateTime
  id: String
  password: String!
  profile: ProfileUncheckedCreateNestedOneWithoutUserInput
  username: String!
}

input UserUncheckedCreateWithoutProfileInput {
  chats: ChatUncheckedCreateNestedManyWithoutMembersInput
  createdAt: DateTime
  id: String
  messages: MessageUncheckedCreateNestedManyWithoutSenderInput
  password: String!
  username: String!
}

input UserUncheckedUpdateInput {
  chats: ChatUncheckedUpdateManyWithoutMembersNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  messages: MessageUncheckedUpdateManyWithoutSenderNestedInput
  password: StringFieldUpdateOperationsInput
  profile: ProfileUncheckedUpdateOneWithoutUserNestedInput
  username: StringFieldUpdateOperationsInput
}

input UserUncheckedUpdateManyInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  username: StringFieldUpdateOperationsInput
}

input UserUncheckedUpdateManyWithoutChatsNestedInput {
  connect: [UserWhereUniqueInput]
  connectOrCreate: [UserCreateOrConnectWithoutChatsInput]
  create: [UserCreateWithoutChatsInput]
  delete: [UserWhereUniqueInput]
  deleteMany: [UserScalarWhereInput]
  disconnect: [UserWhereUniqueInput]
  set: [UserWhereUniqueInput]
  update: [UserUpdateWithWhereUniqueWithoutChatsInput]
  updateMany: [UserUpdateManyWithWhereWithoutChatsInput]
  upsert: [UserUpsertWithWhereUniqueWithoutChatsInput]
}

input UserUncheckedUpdateManyWithoutMembersInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  username: StringFieldUpdateOperationsInput
}

input UserUncheckedUpdateWithoutChatsInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  messages: MessageUncheckedUpdateManyWithoutSenderNestedInput
  password: StringFieldUpdateOperationsInput
  profile: ProfileUncheckedUpdateOneWithoutUserNestedInput
  username: StringFieldUpdateOperationsInput
}

input UserUncheckedUpdateWithoutMessagesInput {
  chats: ChatUncheckedUpdateManyWithoutMembersNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  profile: ProfileUncheckedUpdateOneWithoutUserNestedInput
  username: StringFieldUpdateOperationsInput
}

input UserUncheckedUpdateWithoutProfileInput {
  chats: ChatUncheckedUpdateManyWithoutMembersNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  messages: MessageUncheckedUpdateManyWithoutSenderNestedInput
  password: StringFieldUpdateOperationsInput
  username: StringFieldUpdateOperationsInput
}

input UserUpdateInput {
  chats: ChatUpdateManyWithoutMembersNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  messages: MessageUpdateManyWithoutSenderNestedInput
  password: StringFieldUpdateOperationsInput
  profile: ProfileUpdateOneWithoutUserNestedInput
  username: StringFieldUpdateOperationsInput
}

input UserUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  username: StringFieldUpdateOperationsInput
}

input UserUpdateManyWithWhereWithoutChatsInput {
  data: UserUncheckedUpdateManyWithoutMembersInput!
  where: UserScalarWhereInput!
}

input UserUpdateManyWithoutChatsNestedInput {
  connect: [UserWhereUniqueInput]
  connectOrCreate: [UserCreateOrConnectWithoutChatsInput]
  create: [UserCreateWithoutChatsInput]
  delete: [UserWhereUniqueInput]
  deleteMany: [UserScalarWhereInput]
  disconnect: [UserWhereUniqueInput]
  set: [UserWhereUniqueInput]
  update: [UserUpdateWithWhereUniqueWithoutChatsInput]
  updateMany: [UserUpdateManyWithWhereWithoutChatsInput]
  upsert: [UserUpsertWithWhereUniqueWithoutChatsInput]
}

input UserUpdateOneRequiredWithoutMessagesNestedInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutMessagesInput
  create: UserUncheckedCreateWithoutMessagesInput
  update: UserUncheckedUpdateWithoutMessagesInput
  upsert: UserUpsertWithoutMessagesInput
}

input UserUpdateOneRequiredWithoutProfileNestedInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutProfileInput
  create: UserUncheckedCreateWithoutProfileInput
  update: UserUncheckedUpdateWithoutProfileInput
  upsert: UserUpsertWithoutProfileInput
}

input UserUpdateWithWhereUniqueWithoutChatsInput {
  data: UserUncheckedUpdateWithoutChatsInput!
  where: UserWhereUniqueInput!
}

input UserUpdateWithoutChatsInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  messages: MessageUpdateManyWithoutSenderNestedInput
  password: StringFieldUpdateOperationsInput
  profile: ProfileUpdateOneWithoutUserNestedInput
  username: StringFieldUpdateOperationsInput
}

input UserUpdateWithoutMessagesInput {
  chats: ChatUpdateManyWithoutMembersNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  profile: ProfileUpdateOneWithoutUserNestedInput
  username: StringFieldUpdateOperationsInput
}

input UserUpdateWithoutProfileInput {
  chats: ChatUpdateManyWithoutMembersNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  messages: MessageUpdateManyWithoutSenderNestedInput
  password: StringFieldUpdateOperationsInput
  username: StringFieldUpdateOperationsInput
}

input UserUpsertWithWhereUniqueWithoutChatsInput {
  create: UserUncheckedCreateWithoutChatsInput!
  update: UserUncheckedUpdateWithoutChatsInput!
  where: UserWhereUniqueInput!
}

input UserUpsertWithoutMessagesInput {
  create: UserUncheckedCreateWithoutMessagesInput!
  update: UserUncheckedUpdateWithoutMessagesInput!
}

input UserUpsertWithoutProfileInput {
  create: UserUncheckedCreateWithoutProfileInput!
  update: UserUncheckedUpdateWithoutProfileInput!
}

input UserWhereInput {
  AND: [UserWhereInput]
  NOT: [UserWhereInput]
  OR: [UserWhereInput]
  chats: ChatListRelationFilter
  createdAt: DateTimeFilter
  id: StringFilter
  messages: MessageListRelationFilter
  password: StringFilter
  profile: ProfileWhereInput
  username: StringFilter
}

input UserWhereUniqueInput {
  id: String
  username: String
}