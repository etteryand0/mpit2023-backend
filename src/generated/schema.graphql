### This file was generated by Nexus Schema
### Do not make changes to this file directly


type AggregatePost {
  _count: PostCountAggregateOutputType
  _max: PostMaxAggregateOutputType
  _min: PostMinAggregateOutputType
}

type AggregateProfile {
  _count: ProfileCountAggregateOutputType
  _max: ProfileMaxAggregateOutputType
  _min: ProfileMinAggregateOutputType
}

type AggregateUser {
  _count: UserCountAggregateOutputType
  _max: UserMaxAggregateOutputType
  _min: UserMinAggregateOutputType
}

type BatchPayload {
  count: Int!
}

"""
The `BigInt` scalar type represents non-fractional signed whole numeric values.
@see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt
"""
scalar BigInt

"""The `Byte` scalar type represents byte value as a Buffer"""
scalar Bytes

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

input DateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime]
}

input DateTimeWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedDateTimeFilter
  _min: NestedDateTimeFilter
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeWithAggregatesFilter
  notIn: [DateTime]
}

"""An arbitrary-precision Decimal type"""
scalar Decimal

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar Json @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createOnePost(data: PostCreateInput!): Post!
  createOneProfile(data: ProfileCreateInput!): Profile!
  createOneUser(data: UserCreateInput!): User!
  deleteManyPost(where: PostWhereInput): BatchPayload!
  deleteManyProfile(where: ProfileWhereInput): BatchPayload!
  deleteManyUser(where: UserWhereInput): BatchPayload!
  deleteOnePost(where: PostWhereUniqueInput!): Post
  deleteOneProfile(where: ProfileWhereUniqueInput!): Profile
  deleteOneUser(where: UserWhereUniqueInput!): User
  login(data: SignInInput): Token
  signup(data: SignUpInput!): Token!
  updateManyPost(data: PostUpdateManyMutationInput!, where: PostWhereInput): BatchPayload!
  updateManyProfile(data: ProfileUpdateManyMutationInput!, where: ProfileWhereInput): BatchPayload!
  updateManyUser(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  updateOnePost(data: PostUpdateInput!, where: PostWhereUniqueInput!): Post!
  updateOneProfile(data: ProfileUpdateInput!, where: ProfileWhereUniqueInput!): Profile!
  updateOneUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User!
  upsertOnePost(create: PostCreateInput!, update: PostUpdateInput!, where: PostWhereUniqueInput!): Post!
  upsertOneProfile(create: ProfileCreateInput!, update: ProfileUpdateInput!, where: ProfileWhereUniqueInput!): Profile!
  upsertOneUser(create: UserCreateInput!, update: UserUpdateInput!, where: UserWhereUniqueInput!): User!
}

input NestedDateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime]
}

input NestedDateTimeWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedDateTimeFilter
  _min: NestedDateTimeFilter
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeWithAggregatesFilter
  notIn: [DateTime]
}

input NestedIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int]
}

input NestedIntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String]
  startsWith: String
}

input NestedStringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String]
  startsWith: String
}

input NestedStringNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedStringNullableFilter
  _min: NestedStringNullableFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  not: NestedStringNullableWithAggregatesFilter
  notIn: [String]
  startsWith: String
}

input NestedStringWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedStringFilter
  _min: NestedStringFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  not: NestedStringWithAggregatesFilter
  notIn: [String]
  startsWith: String
}

input NullableStringFieldUpdateOperationsInput {
  set: String
}

type Post {
  author: User!
  body: String!
  createdAt: DateTime!
  id: String!
  title: String!
  userId: String!
}

type PostCountAggregateOutputType {
  _all: Int!
  body: Int!
  createdAt: Int!
  id: Int!
  title: Int!
  userId: Int!
}

input PostCountOrderByAggregateInput {
  body: SortOrder
  createdAt: SortOrder
  id: SortOrder
  title: SortOrder
  userId: SortOrder
}

input PostCreateInput {
  author: UserCreateNestedOneWithoutPostsInput!
  body: String!
  createdAt: DateTime
  id: String
  title: String!
}

input PostCreateManyAuthorInput {
  body: String!
  createdAt: DateTime
  id: String
  title: String!
}

input PostCreateManyAuthorInputEnvelope {
  data: PostCreateManyAuthorInput!
  skipDuplicates: Boolean
}

input PostCreateManyInput {
  body: String!
  createdAt: DateTime
  id: String
  title: String!
  userId: String!
}

input PostCreateNestedManyWithoutAuthorInput {
  connect: [PostWhereUniqueInput]
  connectOrCreate: [PostCreateOrConnectWithoutAuthorInput]
  create: [PostCreateWithoutAuthorInput]
  createMany: PostCreateManyAuthorInputEnvelope
}

input PostCreateOrConnectWithoutAuthorInput {
  create: PostUncheckedCreateWithoutAuthorInput!
  where: PostWhereUniqueInput!
}

input PostCreateWithoutAuthorInput {
  body: String!
  createdAt: DateTime
  id: String
  title: String!
}

input PostListRelationFilter {
  every: PostWhereInput
  none: PostWhereInput
  some: PostWhereInput
}

type PostMaxAggregateOutputType {
  body: String
  createdAt: DateTime
  id: String
  title: String
  userId: String
}

input PostMaxOrderByAggregateInput {
  body: SortOrder
  createdAt: SortOrder
  id: SortOrder
  title: SortOrder
  userId: SortOrder
}

type PostMinAggregateOutputType {
  body: String
  createdAt: DateTime
  id: String
  title: String
  userId: String
}

input PostMinOrderByAggregateInput {
  body: SortOrder
  createdAt: SortOrder
  id: SortOrder
  title: SortOrder
  userId: SortOrder
}

input PostOrderByRelationAggregateInput {
  _count: SortOrder
}

input PostOrderByWithAggregationInput {
  _count: PostCountOrderByAggregateInput
  _max: PostMaxOrderByAggregateInput
  _min: PostMinOrderByAggregateInput
  body: SortOrder
  createdAt: SortOrder
  id: SortOrder
  title: SortOrder
  userId: SortOrder
}

input PostOrderByWithRelationInput {
  author: UserOrderByWithRelationInput
  body: SortOrder
  createdAt: SortOrder
  id: SortOrder
  title: SortOrder
  userId: SortOrder
}

enum PostScalarFieldEnum {
  body
  createdAt
  id
  title
  userId
}

input PostScalarWhereInput {
  AND: [PostScalarWhereInput]
  NOT: [PostScalarWhereInput]
  OR: [PostScalarWhereInput]
  body: StringFilter
  createdAt: DateTimeFilter
  id: StringFilter
  title: StringFilter
  userId: StringFilter
}

input PostScalarWhereWithAggregatesInput {
  AND: [PostScalarWhereWithAggregatesInput]
  NOT: [PostScalarWhereWithAggregatesInput]
  OR: [PostScalarWhereWithAggregatesInput]
  body: StringWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  id: StringWithAggregatesFilter
  title: StringWithAggregatesFilter
  userId: StringWithAggregatesFilter
}

input PostUncheckedCreateInput {
  body: String!
  createdAt: DateTime
  id: String
  title: String!
  userId: String!
}

input PostUncheckedCreateNestedManyWithoutAuthorInput {
  connect: [PostWhereUniqueInput]
  connectOrCreate: [PostCreateOrConnectWithoutAuthorInput]
  create: [PostCreateWithoutAuthorInput]
  createMany: PostCreateManyAuthorInputEnvelope
}

input PostUncheckedCreateWithoutAuthorInput {
  body: String!
  createdAt: DateTime
  id: String
  title: String!
}

input PostUncheckedUpdateInput {
  body: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  userId: StringFieldUpdateOperationsInput
}

input PostUncheckedUpdateManyInput {
  body: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  userId: StringFieldUpdateOperationsInput
}

input PostUncheckedUpdateManyWithoutAuthorNestedInput {
  connect: [PostWhereUniqueInput]
  connectOrCreate: [PostCreateOrConnectWithoutAuthorInput]
  create: [PostCreateWithoutAuthorInput]
  createMany: PostCreateManyAuthorInputEnvelope
  delete: [PostWhereUniqueInput]
  deleteMany: [PostScalarWhereInput]
  disconnect: [PostWhereUniqueInput]
  set: [PostWhereUniqueInput]
  update: [PostUpdateWithWhereUniqueWithoutAuthorInput]
  updateMany: [PostUpdateManyWithWhereWithoutAuthorInput]
  upsert: [PostUpsertWithWhereUniqueWithoutAuthorInput]
}

input PostUncheckedUpdateManyWithoutPostsInput {
  body: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
}

input PostUncheckedUpdateWithoutAuthorInput {
  body: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
}

input PostUpdateInput {
  author: UserUpdateOneRequiredWithoutPostsNestedInput
  body: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
}

input PostUpdateManyMutationInput {
  body: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
}

input PostUpdateManyWithWhereWithoutAuthorInput {
  data: PostUncheckedUpdateManyWithoutPostsInput!
  where: PostScalarWhereInput!
}

input PostUpdateManyWithoutAuthorNestedInput {
  connect: [PostWhereUniqueInput]
  connectOrCreate: [PostCreateOrConnectWithoutAuthorInput]
  create: [PostCreateWithoutAuthorInput]
  createMany: PostCreateManyAuthorInputEnvelope
  delete: [PostWhereUniqueInput]
  deleteMany: [PostScalarWhereInput]
  disconnect: [PostWhereUniqueInput]
  set: [PostWhereUniqueInput]
  update: [PostUpdateWithWhereUniqueWithoutAuthorInput]
  updateMany: [PostUpdateManyWithWhereWithoutAuthorInput]
  upsert: [PostUpsertWithWhereUniqueWithoutAuthorInput]
}

input PostUpdateWithWhereUniqueWithoutAuthorInput {
  data: PostUncheckedUpdateWithoutAuthorInput!
  where: PostWhereUniqueInput!
}

input PostUpdateWithoutAuthorInput {
  body: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
}

input PostUpsertWithWhereUniqueWithoutAuthorInput {
  create: PostUncheckedCreateWithoutAuthorInput!
  update: PostUncheckedUpdateWithoutAuthorInput!
  where: PostWhereUniqueInput!
}

input PostWhereInput {
  AND: [PostWhereInput]
  NOT: [PostWhereInput]
  OR: [PostWhereInput]
  author: UserWhereInput
  body: StringFilter
  createdAt: DateTimeFilter
  id: StringFilter
  title: StringFilter
  userId: StringFilter
}

input PostWhereUniqueInput {
  id: String
}

type Profile {
  avatar: String
  bio: String
  id: String!
  name: String
  updatedAt: DateTime!
  user: User!
  userEmail: String!
  username: String
}

type ProfileCountAggregateOutputType {
  _all: Int!
  avatar: Int!
  bio: Int!
  id: Int!
  name: Int!
  updatedAt: Int!
  userEmail: Int!
  username: Int!
}

input ProfileCountOrderByAggregateInput {
  avatar: SortOrder
  bio: SortOrder
  id: SortOrder
  name: SortOrder
  updatedAt: SortOrder
  userEmail: SortOrder
  username: SortOrder
}

input ProfileCreateInput {
  avatar: String
  bio: String
  id: String
  name: String
  updatedAt: DateTime
  user: UserCreateNestedOneWithoutProfileInput!
  username: String
}

input ProfileCreateManyInput {
  avatar: String
  bio: String
  id: String
  name: String
  updatedAt: DateTime
  userEmail: String!
  username: String
}

input ProfileCreateNestedOneWithoutUserInput {
  connect: ProfileWhereUniqueInput
  connectOrCreate: ProfileCreateOrConnectWithoutUserInput
  create: ProfileUncheckedCreateWithoutUserInput
}

input ProfileCreateOrConnectWithoutUserInput {
  create: ProfileUncheckedCreateWithoutUserInput!
  where: ProfileWhereUniqueInput!
}

input ProfileCreateWithoutUserInput {
  avatar: String
  bio: String
  id: String
  name: String
  updatedAt: DateTime
  username: String
}

type ProfileMaxAggregateOutputType {
  avatar: String
  bio: String
  id: String
  name: String
  updatedAt: DateTime
  userEmail: String
  username: String
}

input ProfileMaxOrderByAggregateInput {
  avatar: SortOrder
  bio: SortOrder
  id: SortOrder
  name: SortOrder
  updatedAt: SortOrder
  userEmail: SortOrder
  username: SortOrder
}

type ProfileMinAggregateOutputType {
  avatar: String
  bio: String
  id: String
  name: String
  updatedAt: DateTime
  userEmail: String
  username: String
}

input ProfileMinOrderByAggregateInput {
  avatar: SortOrder
  bio: SortOrder
  id: SortOrder
  name: SortOrder
  updatedAt: SortOrder
  userEmail: SortOrder
  username: SortOrder
}

input ProfileOrderByWithAggregationInput {
  _count: ProfileCountOrderByAggregateInput
  _max: ProfileMaxOrderByAggregateInput
  _min: ProfileMinOrderByAggregateInput
  avatar: SortOrder
  bio: SortOrder
  id: SortOrder
  name: SortOrder
  updatedAt: SortOrder
  userEmail: SortOrder
  username: SortOrder
}

input ProfileOrderByWithRelationInput {
  avatar: SortOrder
  bio: SortOrder
  id: SortOrder
  name: SortOrder
  updatedAt: SortOrder
  user: UserOrderByWithRelationInput
  userEmail: SortOrder
  username: SortOrder
}

input ProfileRelationFilter {
  is: ProfileWhereInput
  isNot: ProfileWhereInput
}

enum ProfileScalarFieldEnum {
  avatar
  bio
  id
  name
  updatedAt
  userEmail
  username
}

input ProfileScalarWhereWithAggregatesInput {
  AND: [ProfileScalarWhereWithAggregatesInput]
  NOT: [ProfileScalarWhereWithAggregatesInput]
  OR: [ProfileScalarWhereWithAggregatesInput]
  avatar: StringNullableWithAggregatesFilter
  bio: StringNullableWithAggregatesFilter
  id: StringWithAggregatesFilter
  name: StringNullableWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
  userEmail: StringWithAggregatesFilter
  username: StringNullableWithAggregatesFilter
}

input ProfileUncheckedCreateInput {
  avatar: String
  bio: String
  id: String
  name: String
  updatedAt: DateTime
  userEmail: String!
  username: String
}

input ProfileUncheckedCreateNestedOneWithoutUserInput {
  connect: ProfileWhereUniqueInput
  connectOrCreate: ProfileCreateOrConnectWithoutUserInput
  create: ProfileUncheckedCreateWithoutUserInput
}

input ProfileUncheckedCreateWithoutUserInput {
  avatar: String
  bio: String
  id: String
  name: String
  updatedAt: DateTime
  username: String
}

input ProfileUncheckedUpdateInput {
  avatar: NullableStringFieldUpdateOperationsInput
  bio: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  userEmail: StringFieldUpdateOperationsInput
  username: NullableStringFieldUpdateOperationsInput
}

input ProfileUncheckedUpdateManyInput {
  avatar: NullableStringFieldUpdateOperationsInput
  bio: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  userEmail: StringFieldUpdateOperationsInput
  username: NullableStringFieldUpdateOperationsInput
}

input ProfileUncheckedUpdateOneWithoutUserNestedInput {
  connect: ProfileWhereUniqueInput
  connectOrCreate: ProfileCreateOrConnectWithoutUserInput
  create: ProfileUncheckedCreateWithoutUserInput
  delete: Boolean
  disconnect: Boolean
  update: ProfileUncheckedUpdateWithoutUserInput
  upsert: ProfileUpsertWithoutUserInput
}

input ProfileUncheckedUpdateWithoutUserInput {
  avatar: NullableStringFieldUpdateOperationsInput
  bio: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  username: NullableStringFieldUpdateOperationsInput
}

input ProfileUpdateInput {
  avatar: NullableStringFieldUpdateOperationsInput
  bio: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutProfileNestedInput
  username: NullableStringFieldUpdateOperationsInput
}

input ProfileUpdateManyMutationInput {
  avatar: NullableStringFieldUpdateOperationsInput
  bio: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  username: NullableStringFieldUpdateOperationsInput
}

input ProfileUpdateOneWithoutUserNestedInput {
  connect: ProfileWhereUniqueInput
  connectOrCreate: ProfileCreateOrConnectWithoutUserInput
  create: ProfileUncheckedCreateWithoutUserInput
  delete: Boolean
  disconnect: Boolean
  update: ProfileUncheckedUpdateWithoutUserInput
  upsert: ProfileUpsertWithoutUserInput
}

input ProfileUpdateWithoutUserInput {
  avatar: NullableStringFieldUpdateOperationsInput
  bio: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  username: NullableStringFieldUpdateOperationsInput
}

input ProfileUpsertWithoutUserInput {
  create: ProfileUncheckedCreateWithoutUserInput!
  update: ProfileUncheckedUpdateWithoutUserInput!
}

input ProfileWhereInput {
  AND: [ProfileWhereInput]
  NOT: [ProfileWhereInput]
  OR: [ProfileWhereInput]
  avatar: StringNullableFilter
  bio: StringNullableFilter
  id: StringFilter
  name: StringNullableFilter
  updatedAt: DateTimeFilter
  user: UserWhereInput
  userEmail: StringFilter
  username: StringNullableFilter
}

input ProfileWhereUniqueInput {
  id: String
  userEmail: String
  username: String
}

type Query {
  aggregatePost(cursor: PostWhereUniqueInput, orderBy: [PostOrderByWithRelationInput], skip: Int, take: Int, where: PostWhereInput): AggregatePost
  aggregateProfile(cursor: ProfileWhereUniqueInput, orderBy: [ProfileOrderByWithRelationInput], skip: Int, take: Int, where: ProfileWhereInput): AggregateProfile
  aggregateUser(cursor: UserWhereUniqueInput, orderBy: [UserOrderByWithRelationInput], skip: Int, take: Int, where: UserWhereInput): AggregateUser
  findFirstPost(cursor: PostWhereUniqueInput, distinct: [PostScalarFieldEnum], orderBy: [PostOrderByWithRelationInput], skip: Int, take: Int, where: PostWhereInput): Post
  findFirstProfile(cursor: ProfileWhereUniqueInput, distinct: [ProfileScalarFieldEnum], orderBy: [ProfileOrderByWithRelationInput], skip: Int, take: Int, where: ProfileWhereInput): Profile
  findFirstUser(cursor: UserWhereUniqueInput, distinct: [UserScalarFieldEnum], orderBy: [UserOrderByWithRelationInput], skip: Int, take: Int, where: UserWhereInput): User
  findManyPost(cursor: PostWhereUniqueInput, distinct: [PostScalarFieldEnum], orderBy: [PostOrderByWithRelationInput], skip: Int, take: Int, where: PostWhereInput): [Post!]!
  findManyPostCount(cursor: PostWhereUniqueInput, distinct: [PostScalarFieldEnum], orderBy: [PostOrderByWithRelationInput], skip: Int, take: Int, where: PostWhereInput): Int!
  findManyProfile(cursor: ProfileWhereUniqueInput, distinct: [ProfileScalarFieldEnum], orderBy: [ProfileOrderByWithRelationInput], skip: Int, take: Int, where: ProfileWhereInput): [Profile!]!
  findManyProfileCount(cursor: ProfileWhereUniqueInput, distinct: [ProfileScalarFieldEnum], orderBy: [ProfileOrderByWithRelationInput], skip: Int, take: Int, where: ProfileWhereInput): Int!
  findManyUser(cursor: UserWhereUniqueInput, distinct: [UserScalarFieldEnum], orderBy: [UserOrderByWithRelationInput], skip: Int, take: Int, where: UserWhereInput): [User!]!
  findManyUserCount(cursor: UserWhereUniqueInput, distinct: [UserScalarFieldEnum], orderBy: [UserOrderByWithRelationInput], skip: Int, take: Int, where: UserWhereInput): Int!
  findUniquePost(where: PostWhereUniqueInput!): Post
  findUniqueProfile(where: ProfileWhereUniqueInput!): Profile
  findUniqueUser(where: UserWhereUniqueInput!): User
  me: User!
}

enum QueryMode {
  default
  insensitive
}

input SignInInput {
  email: String!
  password: String!
}

input SignUpInput {
  email: String!
  name: String!
  password: String!
}

enum SortOrder {
  asc
  desc
}

input StringFieldUpdateOperationsInput {
  set: String
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringFilter
  notIn: [String]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringNullableFilter
  notIn: [String]
  startsWith: String
}

input StringNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedStringNullableFilter
  _min: NestedStringNullableFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringNullableWithAggregatesFilter
  notIn: [String]
  startsWith: String
}

input StringWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedStringFilter
  _min: NestedStringFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringWithAggregatesFilter
  notIn: [String]
  startsWith: String
}

type Token {
  token: String
}

enum TransactionIsolationLevel {
  ReadCommitted
  ReadUncommitted
  RepeatableRead
  Serializable
}

type User {
  _count: UserCountOutputType!
  createdAt: DateTime!
  email: String!
  id: String!
  password: String!
  posts(cursor: PostWhereUniqueInput, distinct: PostScalarFieldEnum, orderBy: PostOrderByWithRelationInput, skip: Int, take: Int, where: PostWhereInput): [Post!]!
  profile: Profile
}

type UserCountAggregateOutputType {
  _all: Int!
  createdAt: Int!
  email: Int!
  id: Int!
  password: Int!
}

input UserCountOrderByAggregateInput {
  createdAt: SortOrder
  email: SortOrder
  id: SortOrder
  password: SortOrder
}

type UserCountOutputType {
  posts: Int!
}

input UserCreateInput {
  createdAt: DateTime
  email: String!
  id: String
  password: String!
  posts: PostCreateNestedManyWithoutAuthorInput
  profile: ProfileCreateNestedOneWithoutUserInput
}

input UserCreateManyInput {
  createdAt: DateTime
  email: String!
  id: String
  password: String!
}

input UserCreateNestedOneWithoutPostsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutPostsInput
  create: UserUncheckedCreateWithoutPostsInput
}

input UserCreateNestedOneWithoutProfileInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutProfileInput
  create: UserUncheckedCreateWithoutProfileInput
}

input UserCreateOrConnectWithoutPostsInput {
  create: UserUncheckedCreateWithoutPostsInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutProfileInput {
  create: UserUncheckedCreateWithoutProfileInput!
  where: UserWhereUniqueInput!
}

input UserCreateWithoutPostsInput {
  createdAt: DateTime
  email: String!
  id: String
  password: String!
  profile: ProfileCreateNestedOneWithoutUserInput
}

input UserCreateWithoutProfileInput {
  createdAt: DateTime
  email: String!
  id: String
  password: String!
  posts: PostCreateNestedManyWithoutAuthorInput
}

type UserMaxAggregateOutputType {
  createdAt: DateTime
  email: String
  id: String
  password: String
}

input UserMaxOrderByAggregateInput {
  createdAt: SortOrder
  email: SortOrder
  id: SortOrder
  password: SortOrder
}

type UserMinAggregateOutputType {
  createdAt: DateTime
  email: String
  id: String
  password: String
}

input UserMinOrderByAggregateInput {
  createdAt: SortOrder
  email: SortOrder
  id: SortOrder
  password: SortOrder
}

input UserOrderByWithAggregationInput {
  _count: UserCountOrderByAggregateInput
  _max: UserMaxOrderByAggregateInput
  _min: UserMinOrderByAggregateInput
  createdAt: SortOrder
  email: SortOrder
  id: SortOrder
  password: SortOrder
}

input UserOrderByWithRelationInput {
  createdAt: SortOrder
  email: SortOrder
  id: SortOrder
  password: SortOrder
  posts: PostOrderByRelationAggregateInput
  profile: ProfileOrderByWithRelationInput
}

input UserRelationFilter {
  is: UserWhereInput
  isNot: UserWhereInput
}

enum UserScalarFieldEnum {
  createdAt
  email
  id
  password
}

input UserScalarWhereWithAggregatesInput {
  AND: [UserScalarWhereWithAggregatesInput]
  NOT: [UserScalarWhereWithAggregatesInput]
  OR: [UserScalarWhereWithAggregatesInput]
  createdAt: DateTimeWithAggregatesFilter
  email: StringWithAggregatesFilter
  id: StringWithAggregatesFilter
  password: StringWithAggregatesFilter
}

input UserUncheckedCreateInput {
  createdAt: DateTime
  email: String!
  id: String
  password: String!
  posts: PostUncheckedCreateNestedManyWithoutAuthorInput
  profile: ProfileUncheckedCreateNestedOneWithoutUserInput
}

input UserUncheckedCreateWithoutPostsInput {
  createdAt: DateTime
  email: String!
  id: String
  password: String!
  profile: ProfileUncheckedCreateNestedOneWithoutUserInput
}

input UserUncheckedCreateWithoutProfileInput {
  createdAt: DateTime
  email: String!
  id: String
  password: String!
  posts: PostUncheckedCreateNestedManyWithoutAuthorInput
}

input UserUncheckedUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  posts: PostUncheckedUpdateManyWithoutAuthorNestedInput
  profile: ProfileUncheckedUpdateOneWithoutUserNestedInput
}

input UserUncheckedUpdateManyInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
}

input UserUncheckedUpdateWithoutPostsInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  profile: ProfileUncheckedUpdateOneWithoutUserNestedInput
}

input UserUncheckedUpdateWithoutProfileInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  posts: PostUncheckedUpdateManyWithoutAuthorNestedInput
}

input UserUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  posts: PostUpdateManyWithoutAuthorNestedInput
  profile: ProfileUpdateOneWithoutUserNestedInput
}

input UserUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
}

input UserUpdateOneRequiredWithoutPostsNestedInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutPostsInput
  create: UserUncheckedCreateWithoutPostsInput
  update: UserUncheckedUpdateWithoutPostsInput
  upsert: UserUpsertWithoutPostsInput
}

input UserUpdateOneRequiredWithoutProfileNestedInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutProfileInput
  create: UserUncheckedCreateWithoutProfileInput
  update: UserUncheckedUpdateWithoutProfileInput
  upsert: UserUpsertWithoutProfileInput
}

input UserUpdateWithoutPostsInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  profile: ProfileUpdateOneWithoutUserNestedInput
}

input UserUpdateWithoutProfileInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  posts: PostUpdateManyWithoutAuthorNestedInput
}

input UserUpsertWithoutPostsInput {
  create: UserUncheckedCreateWithoutPostsInput!
  update: UserUncheckedUpdateWithoutPostsInput!
}

input UserUpsertWithoutProfileInput {
  create: UserUncheckedCreateWithoutProfileInput!
  update: UserUncheckedUpdateWithoutProfileInput!
}

input UserWhereInput {
  AND: [UserWhereInput]
  NOT: [UserWhereInput]
  OR: [UserWhereInput]
  createdAt: DateTimeFilter
  email: StringFilter
  id: StringFilter
  password: StringFilter
  posts: PostListRelationFilter
  profile: ProfileWhereInput
}

input UserWhereUniqueInput {
  email: String
  id: String
}